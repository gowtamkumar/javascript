version: "3"

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27018:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - my_network

  backend:
    build: .
    container_name: node
    ports:
      - "3900:3900"
    networks:
      - my_network
    volumes:
      - .:/usr/src/app ## this for development real time update
    environment:
      MONGO_URL: mongodb://mongodb:27017/mydatabase
      PORT: 3900
      NODE_ENV: development
    depends_on:
      - mongodb

networks:
  my_network:
    driver: bridge

volumes:
  mongo-data:
# npm: this should be up this server by create a package json file by docker compose
#     build: ./
#     stdin_open: true
#     tty: true
#     volumes:
#       - ./:/usr/src/app

# services:
#   server:
#     build:
#       context: .
#     environment:
#       NODE_ENV: production
#     ports:
#       - 3900:3900

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#       - ./uploads:/usr/src/app/uploads
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

